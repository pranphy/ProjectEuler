#include<bits/stdc++.h>
using namespace std;
string toString(long);
bool isPrime(int Number) {
    if(Number == 1) return false;
    if(Number==2) return true;
    if(!(Number&1)) return false;
    int Upto = sqrt(Number);
    for(int j=2; j<=Upto; j++)
        if((Number%j )==0)
            return false;
    return true;
}

string toString(long number) {
    string New;
    if(!number) New=string("0");
    while(number>0) {
        New += (number%10)+'0';
        number/=10;
    }
    reverse(New.begin(),New.end());
    return New;
}

vector<int> GeneratePrime(int a,int b) {
    vector<int> Primes;
    if(a % 2 == 0) a++;
    for(int i = a; i<= b; i+=2)
        if(isPrime(i)) Primes.push_back(i);
    return Primes;
}

bool isUnique(string s){
	for(int i=0;i<s.length()-1;i++)
		for(int j = i+i;j<s.length();j++)
			if(s[j]==s[i]) return false;
	return true;
}


int main() {
    vector<int> Primes = GeneratePrime(1000,9999);
    for(int i = 0; i<Primes.size(); i++) {
        string Current = toString(Primes[i]);
        string Sorted = Current;
        sort(Sorted.begin(),Sorted.end());
        int Count = 0;
        vector<string> Permutaions;
        for(int j = i+1; j<Primes.size(); j++) {
            string Here = toString(Primes[j]);
            string HereSorted = Here;
            sort(HereSorted.begin(),HereSorted.end());
            if(HereSorted == Sorted and isUnique(Sorted)) {
                Permutaions.push_back(Here);
                Count++;
                if(Count == 3) {
                    cout<<"Found"<<endl;
                    for(auto p:Permutaions)
                        cout<<p<<" ";
                    return 0;
                }
            }
        }
    }
}
